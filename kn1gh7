#!/bin/python3
#Spencer "Spinjrock" Oswald Feb 2, 2024
#This is the script that pairs with the audispd plugin. It logs any traffic tagged INET, which is all socket creations with
#a0=2 or 10 and prints their pid lineage back to 1 to a log file defined with the variable log_path

import sys
import audit
import auparse
import os
import logging
import typing

LOG_FILE="/var/log/audit/kn1gh7.log"

#Logging setup
logging.basicConfig(
        filename = LOG_FILE,
        encoding = 'utf-8',
        level=logging.DEBUG,
        format='%(asctime)s > %(levelname)s:%(message)s',
        datefmt='%m/%d/%Y>%I:%M:%S%p'
        )

class Process:
    """A little class to hold process data"""
    pid: int
    ppid: int
    cmd: str
    tty: str
    def __init__(self, id: int) -> None:
        """Initalizes from a PID"""
        self.pid = id
        ppid = os.popen("ps -o ppid --no-headers %i" % id).read().strip()
        self.ppid = int(ppid) if ppid != '' else 0
        self.cmd = os.popen("ps -o cmd --no-headers %i" % id).read().strip()
        self.tty = os.popen("ps -o tty --no-headers %i" % id).read().strip()

def lineage(p: Process) -> list[Process]:
    #logging.info("Lineage: Checking in on process: "+str(p))
    if p.ppid == 1 or p.ppid == 0:
        return [p]
    parent_process = Process(p.ppid)
    trace = [p]
    trace += lineage(parent_process)
    return trace

def is_tagged_inet(line:str) -> bool:
    aup = auparse.AuParser(auparse.AUSOURCE_BUFFER, line)
    if not aup:
        logging.critical("is_tagged_inet: Error initalizing AuParse")
        sys.exit(1)
    while aup.parse_next_event():
        while aup.next_field() != False:
            if aup.get_field_name() == "key":
                if aup.get_field_str() == '"INET"':
                    return True
    return False
        

if __name__ == '__main__':
    try:
        logging.info("Starting up...")
        for line in sys.stdin:
            if is_tagged_inet(line):
                aup = auparse.AuParser(auparse.AUSOURCE_BUFFER, line)
                while aup.parse_next_event():
                    while aup.next_field() != False:
                        if aup.get_field_name() == "pid":
                            trace = lineage(Process(int(aup.get_field_str())))
                            pretty_str = "\n[LINEAGE]"
                            for p in trace:
                                pretty_str += ("\nPID: %i, PPID: %i, CMD: %s, TTY: %s" % (p.pid, p.ppid, p.cmd, p.tty)) 
                            pretty_str += "\n[END LINEAGE]"
                            logging.warning(pretty_str)

    except Exception as err:
        logging.critical(err)

sys.exit(0)
